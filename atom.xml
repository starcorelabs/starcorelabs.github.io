<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Starcore Labs</title>
  <subtitle>UX Developer Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://starcorelabs.com/"/>
  <updated>2017-08-18T20:06:07.736Z</updated>
  <id>http://starcorelabs.com/</id>
  
  <author>
    <name>Michael Douglas</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Keys to Success as a Developer</title>
    <link href="http://starcorelabs.com/2017/06/23/keys-to-success-as-a-developer/"/>
    <id>http://starcorelabs.com/2017/06/23/keys-to-success-as-a-developer/</id>
    <published>2017-06-23T05:00:00.000Z</published>
    <updated>2017-08-18T20:06:07.736Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>“The best way to fix code, is to delete it” – GH, .Net Developer with 18 years of experience.</p>
</blockquote>
<h3 id="A-Mindset-That-Will-Keep-You-Sane"><a href="#A-Mindset-That-Will-Keep-You-Sane" class="headerlink" title="A Mindset That Will Keep You Sane"></a>A Mindset That Will Keep You Sane</h3><ul>
<li>Being professional means staying calm and dealing with what is in front of you.</li>
<li>Always get detailed instructions and time frames in writing (email).  </li>
<li>Adapt to change quickly.</li>
<li>Stay up to date on the best practices within the UX/UI field.</li>
<li>Do not attach to your code. It will get refactored or deleted eventually.</li>
<li>Learn to be comfortable with ambiguity. You will never be given all the information.</li>
<li>“What problem are we trying to solve?” Make sure you are not wasting time trying to fix the wrong problem. Understand the big picture by asking questions.</li>
<li>Remember, technical debt can become legal debt.</li>
<li>The focus should be on solving the problem. Not assigning blame.</li>
<li>Learn from everyone. Especially those who have more experience than you.</li>
<li>Peer review code to learn better ways to solve problems.</li>
</ul>
<h3 id="Essential-UX-UI-Skills"><a href="#Essential-UX-UI-Skills" class="headerlink" title="Essential UX/UI Skills"></a>Essential UX/UI Skills</h3><ul>
<li>HTML 5</li>
<li>CSS3 / SCSS</li>
<li>Bootstrap 3 &amp; 4</li>
<li>JavaScript / jQuery</li>
<li>Node.js basics</li>
<li>Gulp</li>
</ul>
<h3 id="Essential-Backend-Skills"><a href="#Essential-Backend-Skills" class="headerlink" title="Essential Backend Skills"></a>Essential Backend Skills</h3><ul>
<li>ASP.Net MVC 5 with Razor</li>
<li>C# 5</li>
<li>.Net 4.6.2</li>
<li>SQL</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;“The best way to fix code, is to delete it” – GH, .Net Developer with 18 years of experience.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;A-Mi
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>A Website Is Not Enough</title>
    <link href="http://starcorelabs.com/2017/05/23/a-website-is-not-enough/"/>
    <id>http://starcorelabs.com/2017/05/23/a-website-is-not-enough/</id>
    <published>2017-05-23T05:00:00.000Z</published>
    <updated>2017-08-18T20:06:07.731Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/chart.jpg" alt="entrepreneur"></p>
<p>Beginning entrepreneurs assume setting up a website is all that is needed to start earning money. The internet is a crowded place. It takes a lot of work to get noticed. Even more work to sell products to customers.</p>
<p>Here’s a brief guide on what is required for a modern ecommerce website.</p>
<ol>
<li><p><a href="https://www.entrepreneur.com/article/232805" target="_blank" rel="external">Brand</a> - Know who you are, what you are selling and why you are selling it. Communicate what you do in one or two sentences. If you cannot explain it within 3 seconds you’ll fail to grab your visitor’s attention.</p>
</li>
<li><p>Technology - Whether you use <a href="http://www.wpbeginner.com/guides/" target="_blank" rel="external">Wordpress</a>, <a href="https://www.squarespace.com/" target="_blank" rel="external">Squarespace</a>, or <a href="https://www.shopify.com/" target="_blank" rel="external">Shopify</a>. Make sure your website is mobile friendly. 80% of all web traffic comes from smart phones. You’ll need to <a href="https://www.upwork.com/cat/developers/" target="_blank" rel="external">hire a web developer</a> to build your website if you are not technical.</p>
</li>
<li><p><a href="https://www.entrepreneur.com/article/75648" target="_blank" rel="external">Customers</a> - Who are you are selling to? What demographics do they belong to? What problem does your product or service solve for them? Why would they buy from you instead of someone else? What value do you provide? The answers to these questions are the basis for your website content. Or you could <a href="https://www.upwork.com/cat/writing/" target="_blank" rel="external">hire a copy writer</a>.</p>
</li>
<li><p><a href="https://moz.com/beginners-guide-to-seo" target="_blank" rel="external">SEO</a> - Search Engine Optimization is the process of building your site so it ranks higher in Google and other search engines. This is a huge topic. There are <a href="https://clutch.co/seo-firms" target="_blank" rel="external">companies that specialize in SEO</a>.</p>
</li>
<li><p><a href="https://moz.com/blog/absolute-beginners-guide-to-google-analytics" target="_blank" rel="external">Analytics</a> - Learn how to use Google Analytics so you can track how many visitors you are getting on your site and if they are leaving quickly (bouncing) or staying around for more than a few minutes.</p>
</li>
<li><p><a href="https://www.entrepreneur.com/article/245730" target="_blank" rel="external">Marketing Funnel</a> - Your website is where people come to learn about your products and purchase them. Getting them to your website requires a marketing funnel.</p>
</li>
<li><p><a href="https://www.smartpassiveincome.com/email-the-smart-way/" target="_blank" rel="external">Email List</a> - No matter what business you are in you will add your visitors to your email list. You can setup a free list using <a href="https://mailchimp.com/" target="_blank" rel="external">MailChimp</a>. Once your visitors join your mailing list you can alert them to new blog posts and/or YouTube videos. As well as send them offers to buy your products.</p>
</li>
<li><p><a href="http://www.pcmag.com/article2/0,2817,2484670,00.asp" target="_blank" rel="external">Shopping Cart</a> - Most websites have shopping carts so customers can add or remove items while they browse a site. Stick with convention and setup a shopping cart.</p>
</li>
<li><p>Payment System - You will need to setup a secure system for your customers to pay you for your products. <a href="https://www.paypal.com/us/home" target="_blank" rel="external">Paypal</a>, <a href="https://stripe.com/" target="_blank" rel="external">Stripe</a>, or selling on <a href="https://www.amazon.com/" target="_blank" rel="external">Amazon</a> are all good options. Make sure to direct these payments into your business account and pay applicable taxes on this income.</p>
</li>
<li><p>Blog / YouTube - These channels are used to build an audience by providing free valuable content. This creates authority in your chosen field. The more people that follow you and join your mailing list. The more sales you’ll receive.</p>
</li>
<li><p>Social Media - Facebook, Twitter, Pinterest, and Instagram are where you post product ads. Potential customers will be introduced to your brand and your products. <a href="https://blog.hootsuite.com/the-essential-guide-to-social-media-marketing/" target="_blank" rel="external">Social Media Marketing</a> is last thing you do after your website, email list, shopping cart, and payment system are in place. Don’t try to build a following with an empty website. Pages with “Coming Soon” kills interest and makes you look like an amateur.</p>
</li>
<li><p>Feedback - Make sure to connect with your customers through emails, comments, Facebook groups, or something else. Understand what they want and then sell it to them. By keeping up with your clients needs you’ll build a better brand and continue to gain more customers.</p>
</li>
<li><p><a href="https://www.entrepreneur.com/article/78512" target="_blank" rel="external">Exit Strategy</a> - Most entrepreneurs are so focused on building their company and making it successful they don’t stop to consider what happens if things go wrong, or if things go right.</p>
</li>
</ol>
<p>These are large complex topics. The trick is to be patience and take your time learning. Avoid listening to anyone who is not successful. They haven’t done it, so they cannot advise you how to do it.</p>
<p>Research how successful people are doing it. Look for people who are already successful in an industry you want to work in. Read their books, follow them on Twitter, and watch their YouTube videos. Attend any webinars or seminars they host. Surround yourself with successful people and emulate them.</p>
<p>Here’s a few books to get you started:</p>
<ol>
<li><a href="https://www.amazon.com/Will-Test-Business-Waste-Money/dp/0997082305/ref=sr_1_1?ie=UTF8&amp;qid=1495567343&amp;sr=8-1&amp;keywords=Will+It+Fly" target="_blank" rel="external">Will It Fly? by Pat Flynn</a></li>
<li><a href="https://www.amazon.com/Lean-Startup-Entrepreneurs-Continuous-Innovation/dp/0307887898/ref=sr_1_1?ie=UTF8&amp;qid=1495567395&amp;sr=8-1&amp;keywords=The+Lean+Startup" target="_blank" rel="external">The Lean Startup by Eric Ries</a></li>
<li><a href="https://www.amazon.com/4-Hour-Work-Week-Escape-Anywhere/dp/0091929113/ref=sr_1_2?ie=UTF8&amp;qid=1495567429&amp;sr=8-2&amp;keywords=The+4-Hour+Workweek" target="_blank" rel="external">The 4-Hour Workweek by Timothy Ferriss</a></li>
</ol>
<div>&nbsp;</div><br><div>&nbsp;</div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/chart.jpg&quot; alt=&quot;entrepreneur&quot;&gt;&lt;/p&gt;
&lt;p&gt;Beginning entrepreneurs assume setting up a website is all that is needed to start e
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Time Management</title>
    <link href="http://starcorelabs.com/2017/04/11/time-management/"/>
    <id>http://starcorelabs.com/2017/04/11/time-management/</id>
    <published>2017-04-11T05:00:00.000Z</published>
    <updated>2017-08-18T20:06:07.737Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/Patek Phillippe 1563 Split Second Chronograph.jpg" alt="Patek Phillippe 1563 Split Second Chronograph"><br><sub><sub>Patek Phillippe 1563 Split Second Chronograph</sub></sub></p>
<blockquote>
<p>People have two problems in life. Knowing what they want and knowing how to get it.</p>
</blockquote>
<p>Some mistakenly think of time management as a single skill. Which explains why so many are bad at managing it. It is a set of interrelated skills. When used together consistently, helps manage time more effectively.</p>
<p>Skills of Time Management:</p>
<ol>
<li>Focus</li>
<li>Goal Setting</li>
<li>Planning</li>
<li>Prioritizing Tasks</li>
<li>Monitoring Time Usage</li>
<li>Follow Through</li>
</ol>
<h3 id="Focus"><a href="#Focus" class="headerlink" title="Focus"></a>Focus</h3><p>Focus is the ability to pay attention in the moment. Focus requires ignoring distractions (Friends, TV, Facebook, Games, etc.). Stay on task and accomplishing one thing at a time. Humans are biologically wired to focus on one task at a time. (unless diagnosed with ADHD)</p>
<p>To manage time better the myth of “Multi-Tasking” must be put to rest. Try this quick exercise to demonstrate how multi-tasking wastes time. At the top of a standard sheet of paper write, first and last name. Underneath it, write out numbers counting each letter in first and last names.</p>
<p><img src="/img/mulit-tasking-test.png" alt="Mulit-Tasking Test"></p>
<p>This as a template. Use a timer, there are many available for smart phones. The purpose of this exercise is to record how long it takes to write words and numbers. This is not a race. Write at a normal rate. Stop the timer and save the value next to it. This is the control case of doing one task at a time.</p>
<p>Now for the multi-task case. Start the timer and write one letter and then switch to writing a number below it. Alternate between writing letters and numbers until you finish. Stop the timer and record the results. You’ll notice is it much slower. We learn at an early age to focus on writing one word at a time. Switching between letters and numbers changes channels in the brain. This causes confusion by dividing focus. Anything that divides focus causes stress, frustration, and wasted time. Multi-Tasking is the worst myth perpetuated on modern society by misinformed corporations. REFUSE TO DO IT.</p>
<p>Companies that pay hourly are especially prone to this line of thinking. They squeeze employees to get as much work out of them per hour as possible. Chasing the clock only increases stress and burnout.</p>
<h3 id="Goal-Setting"><a href="#Goal-Setting" class="headerlink" title="Goal Setting"></a>Goal Setting</h3><p>A goal is simply a statement of a desired result. Start with the end in mind. What does it look like? Create a clear picture of the outcome required. Write it down.</p>
<p>When working in a group it is essential that all team members communicate the result of a task as clearly as possible. Any confusion or vague descriptions waste time. Team members must go back and forth asking questions to clarify the task before it can be completed.</p>
<p>Understand how to break large projects down into smaller bite-sized chunks that can be accomplished in 30 minutes or less. Average human attention span is 30 to 40 minutes. Frequent short breaks help reset the brain and maximize effective productivity. Institutions that do not communicate, manage time, or plan well will cause employees to divide their attention. Again, divided attention wastes time, causes mistakes, stress, frustration and burnout.</p>
<h3 id="Planning"><a href="#Planning" class="headerlink" title="Planning"></a>Planning</h3><blockquote>
<p>Those who fail to plan, are planning to fail.</p>
</blockquote>
<p>Planning is the skill of using a Calendar to schedule tasks with deadlines over days, weeks, and months. As stated before, some tasks will be too large to accomplish in a 30-minute work block, or even one day. Instead create a project with a clearly defined outcome. Break down the larger vision into smaller tasks. Schedule these tasks logically so they build on each other over time. Space tasks out to give room for unforeseen errors, delays, and necessary breaks. People are not machines.</p>
<p>While planning, remember to schedule time for reviewing the plan weekly and making updates as things change.</p>
<h3 id="Prioritizing-Tasks"><a href="#Prioritizing-Tasks" class="headerlink" title="Prioritizing Tasks"></a>Prioritizing Tasks</h3><p>During planning consider which tasks will have the most impact and/or can be completed quickly. Prioritize those tasks by moving them to the top of the list or scheduling them first. Doing this ensures they get completed first. This maximizes efficient use of time as more complex task will require more time to complete.</p>
<h3 id="Monitoring-time-usage"><a href="#Monitoring-time-usage" class="headerlink" title="Monitoring time usage"></a>Monitoring time usage</h3><p>This is the most difficult aspect of time management. Once the goals have been set and tasks scheduled it is time to work each task in the list. While working on each task it is important to stay aware of time usage. Either adjusting working speed or revising estimates of how long each task will take to complete.</p>
<p>Take notes after each task to denote its completion and its duration. Consistent monitoring and note taking develops a better sense of time estimation and task management.</p>
<h3 id="Follow-Through"><a href="#Follow-Through" class="headerlink" title="Follow Through"></a>Follow Through</h3><p>Get to work as soon as possible. Without follow through, nothing gets done.</p>
<p>Don’t get stuck in “Analysis paralysis” or “Planning-its”. Wasting time deciding what tasks need to be done and/or planning things out perfectly is counter-productive. No plan or task can be perfect. Instead, aim for simple clear communication and understanding the desired outcome.</p>
<p>The point of time management is to get things done. Don’t waste time by adding more busy work. When working solo many of these steps can be combined, condensed, and streamlined.</p>
<p>When working in a group it is recommended to clearly define the terms, process, and procedures for time management before work begins. Making sure to emphasize clear simple communication between members. Nothing kills productivity faster than two or more people using the same words while assigning different meanings.</p>
<p>This is a general system that can be adapted to suit most people.</p>
<p>For a more advanced system please read “<a href="https://www.amazon.com/Getting-Things-Done-Stress-Free-Productivity-ebook/dp/B000WH7PKY" target="_blank" rel="external">Getting Things Done by David Allen</a>“</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/Patek Phillippe 1563 Split Second Chronograph.jpg&quot; alt=&quot;Patek Phillippe 1563 Split Second Chronograph&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;sub&gt;Patek
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Atom Editor</title>
    <link href="http://starcorelabs.com/2017/02/06/atom-editor/"/>
    <id>http://starcorelabs.com/2017/02/06/atom-editor/</id>
    <published>2017-02-06T05:00:00.000Z</published>
    <updated>2017-08-18T20:06:07.731Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/atom-logo.png" alt="entrepreneur"></p>
<p>Many developers use a full IDE like Visual Studio for building web applications. Features like intellisense gives you suggestions and adds code for you.</p>
<p>The downside of IDE’s like Visual Studio is they can be resource hogs. Also, they act like a blackbox.  They make changes and add extra code behind the scenes before outputting to the browser. This can cause serious issues for front-end developers.</p>
<p>Which is why front-end developers like editors that give them full control over their code. For a long time, the “cool developers” were using Sublime Text. Which is a great code editor. However, it is not free or open source. Many developers are using it commercially without paying for it. I’m guessing at some point the company behind Sublime Text will remove the free version.</p>
<p>My favorite code editor is <a href="https://atom.io/" target="_blank" rel="external">Atom</a>. It does everything Sublime can do, and more. I like it because it is free, open source, light weight, and fully customizable. It was created and released by GitHub on February 26, 2014. It works on OSX, Linux, and Windows. There are tons of plugins, known as <a href="https://atom.io/packages" target="_blank" rel="external">packages</a>, which add extra functionally to Atom.</p>
<p>The [Flight Manual] (<a href="https://flight-manual.atom.io/" target="_blank" rel="external">https://flight-manual.atom.io/</a>) will teach you how to use and customize your copy of Atom.</p>
<p>Or, you can watch this great [Atom Tutorial] (<a href="https://www.youtube.com/watch?v=EyG20hhON6E" target="_blank" rel="external">https://www.youtube.com/watch?v=EyG20hhON6E</a>) on YouTube.</p>
<p>I recommend all UX/UI front-end developers give Atom a try.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/atom-logo.png&quot; alt=&quot;entrepreneur&quot;&gt;&lt;/p&gt;
&lt;p&gt;Many developers use a full IDE like Visual Studio for building web applications.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Continuous Development</title>
    <link href="http://starcorelabs.com/2017/02/05/continuous-development/"/>
    <id>http://starcorelabs.com/2017/02/05/continuous-development/</id>
    <published>2017-02-05T05:00:00.000Z</published>
    <updated>2017-08-18T20:06:07.732Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/whiteboard.jpg" alt="entrepreneur"></p>
<p>Building web applications as an individual developer is hard. Trying to do it with a team of developers. Organizing who does what and when. Sharing code among all team members without parts being broken or over-written. Figuring out how to make changes requested by the business and deliver the full release on time is a monumental task.</p>
<p>Agile /SCRUM has ruled the software development landscape for last decade. Just because it is popular doesn’t mean it is the best method available.</p>
<p>At the time of its creation Agile solved many flaws within the previous “Waterfall” method of development.  At the same time, it introduced many flaws of its own. Because of this, many developers loath Agile / SCRUM and all its time-wasting quirks.</p>
<p>I did some Google searching for Anti-Agile and found three interesting articles.</p>
<p>Erik Meijer wrote a scathing article explaining why <a href="http://www.theregister.co.uk/2015/01/08/erik_meijer_agile_is_a_cancer_we_have_to_eliminate_from_the_industry/" target="_blank" rel="external">Agile must be destroyed</a>.</p>
<p>Allen Holub wrote, “<a href="http://www.drdobbs.com/architecture-and-design/the-anti-anti-agile-manifesto/240168963" target="_blank" rel="external">The Anti Anti Agile Manifesto</a>“.  He attempts to defend Agile. Pointing out it is how Corporations have chosen to implement it that cause problems. Not the Agile methodology itself.</p>
<p>Michael O. Church wrote a very powerful article about “<a href="https://michaelochurch.wordpress.com/2015/06/06/why-agile-and-especially-scrum-are-terrible/" target="_blank" rel="external">Why Agile and Scrum are terrible</a>“.</p>
<p>This is a much more in-depth post that illustrates in detail how Agile is being abused in the wild. He ends with a positive alternative methodology called “Continuous Development” that solves most these issues.</p>
<p>Andrew Binstock Wrote a great overview of “<a href="http://www.drdobbs.com/architecture-and-design/continuous-development-the-new-maintenan/240167052" target="_blank" rel="external">Continuous Development</a>“ which highlights the purpose and benefits of this alternative method for all forms of development but specifically for the emerging “Internet of Things”.</p>
<p>Personally, I dislike Agile because it is a business-driven model of development. Non-technical business people who do not know how to write code or the time it takes to develop working software are making decisions and setting deadlines. In my opinion, that’s like allowing a 6-year-old to plan your vacation and drive the car. An all-around bad idea.</p>
<p>If “business needs” must drive software development, at least include the developers in the decision-making process.</p>
<p>In the last 10 years, the IT industry has evolved by leaps and bounds, despite the limiting factors of Agile. I feel it’s time we upgrade our development methodology to reflect a 21st Century mindset. If not Continuous Development, then at least something better than Agile.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/whiteboard.jpg&quot; alt=&quot;entrepreneur&quot;&gt;&lt;/p&gt;
&lt;p&gt;Building web applications as an individual developer is hard. Trying to do it w
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>The Beauty of Sass</title>
    <link href="http://starcorelabs.com/2016/12/18/the-beauty-of-sass/"/>
    <id>http://starcorelabs.com/2016/12/18/the-beauty-of-sass/</id>
    <published>2016-12-18T05:00:00.000Z</published>
    <updated>2017-08-18T20:06:07.737Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/sass.jpg" alt="sass"></p>
<p><a href="http://sass-lang.com/" target="_blank" rel="external">SASS</a> stands for Syntactically Awesome Stylesheets. It is a preprocessor for CSS. Which are <a href="http://www.css3-tutorial.net/" target="_blank" rel="external">Cascading Style Sheets</a>.  </p>
<p>CSS is a simple language that allows designers and developers to control the layout and “style” of webpages. CSS itself is simple and the basics can be learned quickly.</p>
<p>The problem with CSS is that it is simple. Every element on a page: font-size, background color, and image position, needs its own set of styles. Some styles can be reused if written correctly. Even with expert skill, CSS written for large projects can quickly become a mess. This is because CSS lacks any kind of programming logic: varibles or functions. It was designed purely to position elements on webpages.</p>
<p>Here’s an example of CSS:</p>
<script async src="//jsfiddle.net/starcorelabs/0wkb8x88/5/embed/html,css,result/dark/"></script>

<p>As you can see it takes a lot of CSS to define the box, colors, fonts, and placement of elements. Imagine having to do this for every element in a web application.</p>
<p>SASS was created to give developers a better way to write reusable CSS using varibles, mixins, nesting, and other programming logic available to developers. There are other preprocessors like <a href="http://lesscss.org/" target="_blank" rel="external">LESS</a> and <a href="http://stylus-lang.com/" target="_blank" rel="external">Stylus</a>. They each have their pros and cons. After carefully reviewing all of them I chose SASS. Most companies have chosen SASS as well. You’ll have to experiment to decide which one works best for you.</p>
<p>Developers write their styles in SASS and then use a complier to transform them into CSS the browser understands. Using either Ruby-Sass or Node-Sass. Personally I prefer <a href="https://www.npmjs.com/package/node-sass" target="_blank" rel="external">Node-Sass</a>.</p>
<p>To confuse you a little more there are two kind of SASS. There is the standard style.sass and the CSS compliant style.scss.</p>
<p>Here’s a great SitePoint article that explains <a href="https://www.sitepoint.com/whats-difference-sass-scss/" target="_blank" rel="external">the differences between SASS and SCSS</a>. Personally I prefer the SCSS version because it is closer to CSS which I’m already familiar with.</p>
<p>You might be wondering, “How long will it take to learn SASS?”</p>
<p>Well if you already know CSS then not long. For reference I taught myself CSS in 3 weeks and then learned SASS (the SCSS version) in one week.<br>Of course I was putting in an hour of study and practice a day. You will learn faster if you put in more time and effort.</p>
<p>You can speed up your learning by watching these free YouTube courses.</p>
<ul>
<li><a href="https://www.youtube.com/playlist?list=PL41lfR-6DnOq3BebucTNMSVDojCIiv_en" target="_blank" rel="external">HTML5 &amp; CSS3 by Quentin Watt</a></li>
</ul>
<p>I learned SASS from this awesome video series.</p>
<ul>
<li><a href="https://www.youtube.com/playlist?list=PLUoqTnNH-2XxOt7UsKlTqbfrA2ucGosCR" target="_blank" rel="external">Sass Tutorials by LevelUp Tuts</a></li>
</ul>
<p>Here’s another great SASS tutorial.</p>
<ul>
<li><a href="https://www.youtube.com/playlist?list=PLUoqTnNH-2XxOt7UsKlTqbfrA2ucGosCR" target="_blank" rel="external">Learn Sass by Brad Hussey</a></li>
</ul>
<p>Once you have the basics of CSS and SASS down you can check out my previous post on refactoring and organizing your SASS codebase.<br><a href="http://starcorelabs.com/2016/12/12/how-do-you-refactor-css/">How Do You Refactor CSS?</a></p>
<p>Using a preprocessor for medium to large websites and web applications is a must. Trying to do it with vanilla CSS is a nightmare, I’ve done it.<br>Whatever your skill level or project. Invest the time to learn SASS. You’ll thank yourself later.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/sass.jpg&quot; alt=&quot;sass&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sass-lang.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SASS&lt;/a&gt; stands for Syntactica
    
    </summary>
    
    
      <category term="Development" scheme="http://starcorelabs.com/tags/Development/"/>
    
  </entry>
  
  <entry>
    <title>Wordpress Development</title>
    <link href="http://starcorelabs.com/2016/12/13/wordpress-development/"/>
    <id>http://starcorelabs.com/2016/12/13/wordpress-development/</id>
    <published>2016-12-13T05:00:00.000Z</published>
    <updated>2017-08-18T20:06:07.738Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/wordpress.png" alt="wordpress"></p>
<p>I’ve been building Wordpress websites for the last few years. It is a great platform for building small to large websites. Many large well-known websites are powered by Wordpress.</p>
<p>It is ideal for non-technical people who simply need a platform for content creation. Most end-users need a text editor to write posts and pages. Wordpress fits this requirement the best.</p>
<p><a href="http://www.wpbeginner.com/" target="_blank" rel="external">WP Beginnger</a> provides all the resources users and developers need to get up and running fast.</p>
<p>Do you need a special feature for your website? Wordpres lets you extend its functionality with Plugins:<br><a href="https://wordpress.org/plugins/photo-gallery/" target="_blank" rel="external">Photo Gallery</a></p>
<p>I suggest people start with WP Beginner because the articles are focused toward people who have no prior experience with Wordpress.</p>
<p>Of course there are tons of websites and YouTube videos to learn from.</p>
<p><a href="https://www.youtube.com/playlist?list=PLC5E59DD6D84D34DC" target="_blank" rel="external">Wordpress Basics</a> - Is a great YouTube video course from Level Up Tuts. I highly recommend it if you are a visual learner.</p>
<p>The great part about Wordpress is that the learning curve is small.</p>
<p>If you simply want to experiment with the software you can <a href="http://www.wpbeginner.com/wp-tutorials/how-to-install-wordpress-on-your-windows-computer-using-wamp/" target="_blank" rel="external">Install Wordpress on your Windows Computer using WAMP</a>.</p>
<p>The key to learning Wordpress is to not get overwhelmed. Pick one tutorial and stick with it until the end. Do a few more hands-on tutorials until you’ve built a half dozen small projects. By then you’ll have a good understanding for how to use Wordpress.</p>
<p>If you want to get into the development side of things check out the <a href="https://codex.wordpress.org/" target="_blank" rel="external">Wordpress Codex</a>.</p>
<p>This is a great reference for both using Wordpress and getting started with Wordpress development.</p>
<p>There are also forums, reddit threads, Facebook groups, and Meetups for Wordpress that might help you learn more.</p>
<p>Remember learning Wordpress is a process that takes time.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/wordpress.png&quot; alt=&quot;wordpress&quot;&gt;&lt;/p&gt;
&lt;p&gt;I’ve been building Wordpress websites for the last few years. It is a great platfor
    
    </summary>
    
    
      <category term="Development" scheme="http://starcorelabs.com/tags/Development/"/>
    
  </entry>
  
  <entry>
    <title>How Do You Refactor CSS?</title>
    <link href="http://starcorelabs.com/2016/12/12/how-do-you-refactor-css/"/>
    <id>http://starcorelabs.com/2016/12/12/how-do-you-refactor-css/</id>
    <published>2016-12-12T05:00:00.000Z</published>
    <updated>2017-08-18T20:06:07.735Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/laptop-code.jpg" alt="laptop code"></p>
<blockquote>
<p>Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.</p>
</blockquote>
<p>Most of the corporate environments I’ve worked in are years behind the latest trends in front-end development. Not using or allowing any kind of preprocessors, no build process, and no package management. All these combined to cause technical debt, a bloated codebase, frustrated developers, and especially wasted time and money.</p>
<p>Thankfully the company I currently work for is on the cutting edge of web development. It is so great when a company gets it!</p>
<p>We use Node.js / Gulp.js for automation and SASS for styling. Which gives us the speed and flexibility to build websites and write CSS that is more modular and maintainable.</p>
<p>Of course even the most enlightened company will have some dark legacy code lurking somewhere on their servers.</p>
<p>While it is perfectly functional code. Overtime it has become an overgrown tangled garden.  This makes it harder to track down errors and add new features.</p>
<p>Attempting to refactor a codebase this large would require a rewrite and reorganization of the code. It would take too long, cost too much, and some elements would break due to their reliance on other legacy code that, for business reasons, cannot be changed.</p>
<p>Even if the code was copied to a development server and worked on as a seperate branch in the repository it would still cost time and money to fix.</p>
<p>Plus, there is the looming question of how do you organize something as gargantuan as a 7 year old interconnected SCSS codebase?</p>
<p>My company has recently began creating a style guide which addresses some of these issues. It informs UX Developers how to organize and write better code going forward.</p>
<p>This is a step in the right direction. However, my sentiment is, “Writing good code that relies on bad code, is still bad code”.</p>
<p>In preperation for what I see as an inevitable refactoring / rewrite of this SCSS codebase I spent time researching online to improve my understanding of the current best practices.</p>
<p>I watched two great YouTube videos.</p>
<ol>
<li><a href="https://www.youtube.com/watch?v=kbGYPm9nYfk" target="_blank" rel="external">Refactoring CSS Without Losing Your Mind by Harry Roberts.</a></li>
<li><a href="https://www.youtube.com/watch?v=IkFq2cSbQ4Q" target="_blank" rel="external">Organizing CSS with OOCSS, SMACSS, and BEM by Matt Stauffer.</a></li>
</ol>
<p>Both videos highly recommended <a href="https://smacss.com/" target="_blank" rel="external">smacss.com.</a></p>
<p>After watching these videos I looked up the speakers online and found their respective websites. They are excellent resources for web developers.</p>
<ul>
<li>Harry Roberts - <a href="http://csswizardry.com/2016/08/refactoring-css-the-three-i-s/" target="_blank" rel="external">The Three I’s of Refactoring CSS</a></li>
<li>Matt Stauffer - <a href="https://mattstauffer.co/blog/organizing-css-oocss-smacss-and-bem" target="_blank" rel="external">Organizing CSS: OOCSS, SMACSS, and BEM</a></li>
</ul>
<p>Later I found this awesome <a href="http://timhartmann.net/frontend-development/scss-styleguide-with-bem-oocss-smacss/" target="_blank" rel="external">SCSS Style Guide by Tim Hartmann.</a></p>
<p>These resources come together to create an elegant map for refactoring existing code and creating new object-oriented CSS that is scalable, modular, and named according to the BEM standard. (Block, Element, Modifier.)</p>
<p>I learned from Harry that refactoring is something that should be an ongoing process within the overall development environment. Not a specific dedicated undertaking that costs too much time and money and takes the focus away from developing new features and/or fixing bugs.</p>
<p>This is part of  “Technical Debt” in development. Something he talks more about in the YouTube video.</p>
<p>From the resources above I put together a folder structure that would help any organization with a large codebase plan out a long term refactoring process.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">scss/</div><div class="line">|- _base/</div><div class="line">|  |- _config.scss</div><div class="line">|  |- _presets.scss</div><div class="line">|  |- _header.scss</div><div class="line">|  |- _nav.scss</div><div class="line">|  |- _article.scss</div><div class="line">|  |- _section.scss</div><div class="line">|  |- _sidebar.scss</div><div class="line">|  |- _footer.scss</div><div class="line"></div><div class="line">|- _layouts/</div><div class="line">|  |- _l-base.scss</div><div class="line">|  |- _l-grid.scss</div><div class="line"></div><div class="line">|- _modules/</div><div class="line">|  |- _m-buttons.scss</div><div class="line">|  |- _m-tabs.scss</div><div class="line"></div><div class="line">|- _states/</div><div class="line">|  |- _s-buttons.scss</div><div class="line">|  |- _s-tabs.scss</div><div class="line">|- _shame.scss</div><div class="line">|- application.scss</div><div class="line"></div><div class="line">stylesheets/</div><div class="line">|- application.css</div></pre></td></tr></table></figure>
<p>You’ll notice that I added a shame file per the suggestion of Matt Stauffer. I’ve included it as a partial. This way if there is a deadline and something has to be fixed quickly. The hacky code goes into the shame file. Which doubles as a to-do list. Later when there is more time developers can go back and refactor it.</p>
<p>On top of these great resources I found uncss that further reduces the codebase.</p>
<p>Since we use Bootstrap 3 in the web application there is a lot of CSS that is not being used and bloats the code.</p>
<p>Chris Ruppel wrote an excellent post <a href="https://www.fourkitchens.com/blog/article/use-gulp-and-uncss-slim-down-your-css-framework" target="_blank" rel="external">Use Gulp and UnCSS to slim down your CSS framework.</a></p>
<p>I used gulp-uncss on a bootstrap-based personal project to remove unused CSS. It cut my CSS down 75%.</p>
<p>A few things surprised me about Uncss. It only took a couple of minutes to setup the gulp task and run it. The process is non-destructive. It maps the “in-use” css code and then writes it to a new output.css file. It makes no changes to the exisiting css. It processed my small codebase faster than I expected. With this approach I doubt it would take long to process a large SCSS codebase.</p>
<p>These are the current best practices. I plan on staying updated on the topics of refactoring and writing organized, scalable, modular CSS.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/laptop-code.jpg&quot; alt=&quot;laptop code&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Always code as if the guy who ends up maintaining your code will b
    
    </summary>
    
    
      <category term="Development" scheme="http://starcorelabs.com/tags/Development/"/>
    
  </entry>
  
  <entry>
    <title>UX Developer</title>
    <link href="http://starcorelabs.com/2016/11/09/ux-developer/"/>
    <id>http://starcorelabs.com/2016/11/09/ux-developer/</id>
    <published>2016-11-09T05:00:00.000Z</published>
    <updated>2017-08-18T20:06:07.737Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/ux-developer.jpg" alt="ux developer"></p>
<p>I recently got a new UX Developer job. I work for a great company here in Indianapolis. I cannot tell you how grateful I am to have landed this job. Or how much I enjoy what I do. Its awesome!</p>
<p>I like the people I work with because they are smart, mature, professional, and focused. They don’t waste time with small talk. They are too busy enjoying getting things done.</p>
<p>I get to use my favorite editor <a href="https://atom.io/" target="_blank" rel="external">Atom</a>. I enjoy writing <a href="http://sass-lang.com/" target="_blank" rel="external">SCSS</a> code and using <a href="http://gulpjs.com/" target="_blank" rel="external">gulp.js</a> for compiling and automating other tasks. Of course I’m still using <a href="http://getbootstrap.com/" target="_blank" rel="external">Bootstrap</a>. I am looking forward to the updated version 4 when it releases.</p>
<p>I’m also getting deeper into <a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a>. It has so much power. In my off hours I’ve been learning <a href="http://es6-features.org/#Constants" target="_blank" rel="external">ES6</a> and tinkering with <a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a>.</p>
<p>We use <a href="https://trello.com/" target="_blank" rel="external">Trello</a> to track projects as well as some internal software. The other tools I use are non-development related or restricted so I cannot talk about them.<br>Nor am I allowed to talk about the projects I work on.</p>
<p>Instead let me tell you about some other amazing tools that I use.</p>
<p>If you are a developer on Mac or Linux you probably use the terminal all day without thinking about. Developers who have to use Windows the “command prompt” is lacking in looks and funcationally. I found this awesome free software called <a href="http://cmder.net/" target="_blank" rel="external">Cmder</a>. It gives you a terminal complete with Linux style commands. It is insanely awesome.</p>
<p>I love <a href="https://git-scm.com/" target="_blank" rel="external">Git</a> and <a href="https://github.com/" target="_blank" rel="external">GitHub</a> but I’m a visual person so runnig git commands sometimes lacks the visual references I crave. <a href="https://www.gitkraken.com/" target="_blank" rel="external">GitKraken</a> provides the functionally and slick eye candy that terminal commands lack. I love looking at this software.</p>
<p>Of course I use <a href="http://www.adobe.com/products/photoshop.html" target="_blank" rel="external">Photoshop</a> and <a href="http://www.adobe.com/products/illustrator.html" target="_blank" rel="external">Illustrator</a> for graphics. <a href="https://www.gimp.org/downloads/" target="_blank" rel="external">Gimp</a> and <a href="https://inkscape.org/en/" target="_blank" rel="external">InkScape</a> are not as powerful as the professional tools but they are good free alternatives.</p>
<p>I love this <a href="https://www.iconico.com/colorpic/" target="_blank" rel="external">ColorPic</a> utility. It gives me the HEX and RGB values for whatever I hover my mouse over.</p>
<p>For screenshots I use <a href="https://lightscreen.com.ar/" target="_blank" rel="external">LightScreen</a>. Its a free simple tool that uses very little resources.</p>
<p>My most important tool is <a href="https://www.google.com/chrome/browser/desktop/" target="_blank" rel="external">Google Chrome</a> and its built-in Developer Tools. They are the best!</p>
<p>That’s pretty much everything I use on a daily basis.<br>If you have any questions feel free to message me on Twitter.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/ux-developer.jpg&quot; alt=&quot;ux developer&quot;&gt;&lt;/p&gt;
&lt;p&gt;I recently got a new UX Developer job. I work for a great company here in Ind
    
    </summary>
    
    
      <category term="Development" scheme="http://starcorelabs.com/tags/Development/"/>
    
  </entry>
  
  <entry>
    <title>Front End Development</title>
    <link href="http://starcorelabs.com/2016/11/02/front-end-development/"/>
    <id>http://starcorelabs.com/2016/11/02/front-end-development/</id>
    <published>2016-11-02T05:00:00.000Z</published>
    <updated>2017-08-18T20:06:07.735Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/dev-spectrum.png" alt="developer spectrum"></p>
<p>Front-End Developers write HTML, CSS, and JavaScript. The languages browsers speak, to display what users see and interact within the browser.</p>
<p>Development, like all highly skilled disciplines, exists on a spectrum. The field of software development is too vast for any single person to know everything. It costs a lot of time, effort, and money to learn these skills.</p>
<p>As the old saying goes, “The jack of all trades is the master of none.” Therefore, developers specialize in a single area of focus within the overall spectrum of development. HTML, CSS, and JavaScript are the only languages that web browsers understand natively. We use browsers every day to check our Facebook profile, watch YouTube videos, and search for things on Google. (Google Chrome is my favorite browser)</p>
<p><img src="/img/browsers.jpg" alt="browsers"></p>
<p>Web browsers are a class of application that runs on your device (Desktop, Laptop, Tablet, Smartphone) and displays web pages. When you are using your browser, in the blink of an eye, it will request a web page from a web server, download and combine the collection of HTML, CSS, JavaScript files along with any relevant images and render them as a full page for you to view and interact with.</p>
<p><img src="/img/files-combine-website.png" alt="files combine website"></p>
<p>These files are actually text files with the ending extensions renamed.</p>
<p><img src="/img/text-to-html.png" alt="text to html"></p>
<p>So all the complexity of the web you use every day is created by these three limited languages. Each one has a specific purpose that works in concert with the other two to bring web pages to life.</p>
<p><img src="/img/html-css-javascript.png" alt="html css javascript"></p>
<p>For non-technical people we can consider the analogy of a house. HTML would be the floor, walls, ceiling, and roof of the house. CSS would be the layout of the rooms, the color of the carpet and walls, the placement of the windows and doors. JavaScript would be the electrical, heat and AC, and the water running into and out of the house. These elements are needed to make a functional modern web page.</p>
<p><img src="/img/blueprints.jpg" alt="blueprints"></p>
<h3 id="Back-End-Development"><a href="#Back-End-Development" class="headerlink" title="Back-End Development"></a>Back-End Development</h3><p>Back-End Development is also known as “Application Development”. It is different from Front-End Development because the languages used cannot be understood or displayed by web browsers. These languages either run exclusively on the server to process data or are used to generate and deliver HTML, CSS, and JavaScript that the browser can understand. Back-End languages include: ASP, C#, .Net, PHP, Ruby, Python, and Java. Some of these languages must be compiled by special expensive tools like Visual Studio before they can be run on the server.</p>
<p>In large web applications like Facebook or Amazon, data is stored in a database. Think of a database like a secure vault that holds lots of linked together spreadsheets. This is where all the secure information, like user information, or Facebook posts, is held.</p>
<p>Back-End Developers link the front-end code using application languages like PHP to databases like MySQL, SQL, and Oracle. Some Back-End Developers specialize in database design and development.</p>
<p>Back-End Development is even more complex and time consuming to learn than Front-End Development. That’s why Back-End Developers usually earn 50% to 70% more money. There are rare developers who can do both Front-End and Back-End Development. They are called “Full Stack” developers. Like Unicorns they are extremely rare. Usually these people end up in high paying jobs or they start their own business. You will likely never see a true Full-Stack Developer without a job and/or business of their own.</p>
<h3 id="How-long-does-it-take-to-learn-Front-End-Development"><a href="#How-long-does-it-take-to-learn-Front-End-Development" class="headerlink" title="How long does it take to learn Front-End Development?"></a>How long does it take to learn Front-End Development?</h3><p>In the last five years, Front-End Development has exploded into a very complex array of tools, frameworks, and libraries all aimed at making it easier to write and organize the HTML, CSS, and JavaScript needed to make fast, interactive, and advanced web applications.</p>
<p>These languages take time to learn. Just like if you tried to learn to read and speak a foreign language. Learning the basics of HTML, CSS, and JavaScript can take a year or longer. You should learn revisioning tools like Git. CSS preprocessors like LESS and SCSS. JavaScript preprocessors like CoffeeScript or TypeScript. Build tools like Grunt, Gulp, and WebPack. Package management tools like Bower. Responsive frameworks like Bootstrap, Foundation, and Skeleton. Single-Page Application frameworks (SPA) like Angular, Ember, and Meteor.</p>
<p>Putting it all together it will take at least four years of study and practice to be functional. That’s the same amount of time as a college degree. Plus, these technologies are a moving target that change daily. While learning these skills, you must stay updated on the newest trends and latest advancements just to stay relevant. Otherwise you’ll be left in the dust.</p>
<p>Here’s a short list of some of the popular (at the time of this post) front-end frameworks and tools available.</p>
<ul>
<li><a href="https://bower.io/" target="_blank" rel="external">Bower</a></li>
<li><a href="http://backbonejs.org/" target="_blank" rel="external">Backbone</a></li>
<li><a href="http://getbootstrap.com/&quot;" target="_blank" rel="external">Bootstrap</a></li>
<li><a href="http://coffeescript.org/" target="_blank" rel="external">CoffeeScript</a></li>
<li><a href="https://git-scm.com/" target="_blank" rel="external">Git</a></li>
<li><a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a></li>
<li><a href="http://fontawesome.io/" target="_blank" rel="external">Font-Awesome</a></li>
<li><a href="https://webpack.github.io/" target="_blank" rel="external">WebPack</a></li>
<li><a href="http://sass-lang.com/" target="_blank" rel="external">SASS</a></li>
<li><a href="http://gruntjs.com/" target="_blank" rel="external">Grunt</a></li>
<li><a href="https://jquery.com/" target="_blank" rel="external">jQuery</a></li>
<li><a href="http://gulpjs.com/" target="_blank" rel="external">Gulp</a></li>
<li><a href="https://angularjs.org/" target="_blank" rel="external">Angular</a></li>
<li><a href="https://angularjs.org/" target="_blank" rel="external">Angular 2</a></li>
<li><a href="http://ionicframework.com/" target="_blank" rel="external">Ionic</a></li>
<li><a href="http://emberjs.com/" target="_blank" rel="external">Ember</a></li>
<li><a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a></li>
<li><a href="https://www.meteor.com/" target="_blank" rel="external">Meteor</a></li>
</ul>
<p>If you are interested in learning more, search on Google for “Front-End Development Basics”. There are tons of free resources to get you started.</p>
<p>Like I said before, learning Front-End Development is very much like learning to read, write, and speak a foreign language. It will take consistent study and practice to develop professional level skills.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/dev-spectrum.png&quot; alt=&quot;developer spectrum&quot;&gt;&lt;/p&gt;
&lt;p&gt;Front-End Developers write HTML, CSS, and JavaScript. The languages bro
    
    </summary>
    
    
      <category term="Development" scheme="http://starcorelabs.com/tags/Development/"/>
    
  </entry>
  
  <entry>
    <title>How to Build a Website for Beginners</title>
    <link href="http://starcorelabs.com/2016/11/01/how-to-build-a-website-for-beginners/"/>
    <id>http://starcorelabs.com/2016/11/01/how-to-build-a-website-for-beginners/</id>
    <published>2016-11-01T05:00:00.000Z</published>
    <updated>2017-08-18T20:06:07.735Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/website.png" alt="website"></p>
<p>So you’ve decided you want a professional website for your blog, hobby, or business. You’ve looked around on Google to find a web development company or freelancer near you. (You have looked on Google right?).</p>
<p>You’ve hopefully gotten over the sticker shock of how much it costs to build a professional website. (It ranges between $2,000 to $6,000 depending on what you want) I’m sure you’ve compared the prices between different companies and decided which one offers you the best deal based on your business needs. (If not, you should do that now)</p>
<p>Maybe you are like most people and have no idea why its so expensive, how websites work, how they are built, or how to use one to earn you money. Maybe you’re looking to find the cheapest person who can to build you a site quickly. Maybe you think once its up you can take over and do it yourself.</p>
<p>That is the road to ruin my friend. You get what you pay for. In other words, how can you expect them to do something for you that they haven’t done for themselves? Seems reasonable but few people apply that kind of logic when they want a shiny new website.</p>
<p>For those “Do-it-yourself” type people. Don’t assume because you’ve used Facebook and Google that you know how to build a website. That’s like assuming because you drive your car to work, you somehow know how to fix it when it breaks down. Or worse, you think you could build one from scratch.</p>
<p>If you do not already know how to write code or how computers work. Trying to do it yourself will be like trying to put IKEA furnature together in the dark. Of course I am not saying you cannot learn. There are tons of YouTube videos and whole websites where you can learn web development for free. I encourage everyone who has interest and time to learn how to write code. The question is do you want to be a developer or just own and run your own site?</p>
<p>Techincally speaking you do not have to know how to write code to setup and run a functional website for your business. Unless you want a custom design and special features. The learning curve is much less if you are simply writing content and marketing your products and/or services.</p>
<p>If you do want to be a developer it will take you a minimum of 4 years to get the basics down. You’ll need to learn HTML, CSS, Responsive Design, JavaScript, PHP, MySQL and Graphic Design. Along with Marketing, Social Media Marketing, Content Writing, and SEO. Plus, the technologies behind web development are changing everyday. You’ll have to keep up with this sea of ever-changing techology just to stay relevent. Its a constantly moving target.</p>
<p>For those of you who are busy trying to run a business it would be wiser to save your time and hire a professonal, like me, who knows what they are doing. Just be willing to listen to that professional since that’s why you’ve hired them. They have put in the time to learn all this stuff.</p>
<p>Keep in mind having a web site doesn’t mean people will instantly find you online or give you money. Its not like winning the lotto. Making money online is hard and takes time. There is no silver bullet. You have to build your site correctly from the start so people can search for you on Google. This is based on things the are already looking for that match with what you are selling. How do you do that? Its call Search Engine Optimization or SEO. There are whole companies that specialize in just doing SEO for websites. That’s how deep this rabbit hole goes.</p>
<p>Having a website is like owning a puppy. You have to feed it, walk it, and clean up after it. With a website you have to set it up correctly, SEO, Marketing, add some kind of payment system to sell products and/or services so people can buy from your site. Then you have to maintain it with constant content updates. Otherwise it will be a boring static site few people will want to visit. It will cost you money instead of earning you money.</p>
<p>If you just want a free site to post your thoughts I suggest you go to Wordpress.com. You’ll get a limited free blog with a free domain of your choice. However, if you want to make custom changes or use your own domain it will cost you. Still, if you just want to post your thoughts and add some photos its a good way to get familiar with the software. Beware Wordpress.com does not let you sell things through their free account.</p>
<p>To earn money from your website you’ll need to pay for a hosted version of the Wordpress software. Then you will need to sell a service, product, and/or advertisements. The design of your site and your content (written text) are all part of presenting whatever you are selling in a compelling way to entice your viewers to buy from you. There are tons of books, videos, and websites that can teach you how to do all of these things. However, as I pointed out previously it takes years to learn everything you’ll need to know.</p>
<p>In an effort to save you time and money I’ve written a short summary of how to setup a web site for beginners. This is a bare bones broad strokes overview of how to do it. If this doesn’t make sense to you, or you don’t want to take the time to read this and follow along, then you should hire a professonal.</p>
<ol>
<li>Go to GoDaddy.com and pick a domain. Make sure it is focused on the thing you want to be known for or the thing you are selling. Consider thinking from the point of view of someone who’s putting a search in Google. What would you need to type in to find the thing you are selling? This is called Search Engine Optimization. If you start building your website with the idea of making it easy to find on Google, you’ll get more traffic later on.</li>
</ol>
<p>Buy your domain if it is available and make sure to pay the extra $7.00 - $10.00 for privacy. It prevents people from getting your email address and spamming you. We all get enough spam as it is. Plus, people with a bit of knowledge can use your domain to look up your home address. Do you really want them to show up at your house? Trust me, get the privacy. It will prevent headaches in the future.</p>
<ol>
<li><p>You can get hosting separate from your domain from many other companies. Just search on Google for “web hosting”. However for the simplicity of this article I will suggested sticking with GoDaddy.com as well. Having your domain and hosting in the same place, with the same company, will make it really easy to connect the two together. They have excellent customer service and will setup everything for you if you ask them nicely. Just ask them for Wordpress hosting. Which is cheaper than standard hosting. Or, if you’re techinal you can follow their setup guide. Either way it will only take you 10 minutes to get your site up and running.</p>
</li>
<li><p>Sign-in to your site with the user name and password you created. Use a strong password. Make sure to save it some place secure. Pick a free theme within Wordpress. Or buy theme from Themeforest.net. Customize your theme with colors and photos.</p>
</li>
<li><p>Add content. Write up a compelling story about who you are, what you do, and what you’re selling. Write it from the point of view of the people who are going to read it. Speak directly to them and tell them how your product or service will benefit them. Keep it simple.</p>
</li>
<li><p>Add plug-ins. Wordpress has tons of free plug-ins that let you customize your SEO, Google Analytics, Contact Form, while pulling in other website functionality. You can use YouTube for video, SoundCloud and iTunes for music. Amazon for product sales. Mailchimp for email marketing. Plus tons of other Social Media Marketing plug-ins. These help you bring people to your site so they will read your content and buy your products.</p>
</li>
<li><p>SEO - Which means Search Engine Optimization. This is how people find you on Google. Search engines like Google will scan your site on a regular basis and rank it based on how active it is, how recent you updated the content, how relevant your keywords are, and how many people are linking to your site, among other things. Learn more about SEO here: Beginners guide to SEO.</p>
</li>
<li><p>You can learn inbound marketing for free on Hubspot.com This will give you a primer on how to capture people’s attention and drive traffic to your web site.</p>
</li>
</ol>
<p>If you need help with any part of your website setup, custom code, design, or logo. You can contact me at starcorelabs@gmail.com. My rate is $60 an hour and I’ve been building websites since 2006. I have in corporate environments for big companies and now currently run my own freelance development company. Hire me today and let’s build your site the right way!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/website.png&quot; alt=&quot;website&quot;&gt;&lt;/p&gt;
&lt;p&gt;So you’ve decided you want a professional website for your blog, hobby, or business. Yo
    
    </summary>
    
    
      <category term="Development" scheme="http://starcorelabs.com/tags/Development/"/>
    
  </entry>
  
</feed>
